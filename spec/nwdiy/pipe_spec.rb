#!/usr/bin/env ruby
# -*- mode: ruby; coding: utf-8 -*-
################################################################
# Copyright (c) 2017 KASHIMA Hiroaki <kashima@jp.fujitsu.com>
# 本ツールは Apache License 2.0 ライセンスで公開します。
# 著作権については ./LICENSE もご確認ください
################################################################

require "spec_helper"

################################################################
# パイプの概要
################
# パイプの機能は、Nwdiy::Func::XXX 機能インスタンスを横に並べて
# パケットを順次処理させるための機構です。
# シェルのパイプ機能でコマンドの標準入出力を繋げる仕組みと似ています。
# ただし、シェルのパイプ機能は左から右への一方向ですが、
# NwDiy のパイプ機能は双方向です。双方向のパイプを可能にすることで、
# 往路パケットに加えた変更を復路パケットで戻せるようにしています。
#
# よく考えると '.' によるメソッドチェーンにも似ています。
# しかし ruby のメソッドチェーンは双方向というわけにはいきませんし、
# そもそもパケット処理はパケットに対する処理であり、
# Nwdiy::Func::Ethernet などの機能インスタンスに対する処理ではないので、
# 意味がつながらなくなってしまいます。
# 似ているが別物、ということでご理解ください。
################################################################
# パイプの機能構成
################
# パイプの機能はおおまかに説明すると veth です。Linux の ip link コマ
# ンドで作成できる veth 機能とだいたい同じです。
#
# ただし本当に ip link で veth を生成するのは、以下のときだけです。
#
# - Linux 上で ip link add veth する権限を持っていること。
# - パイプの両端ともインターフェース機能ではないこと。
# - パイプの少なくとも一端が NW-DIY の外でパケットの処理をすること。
#
# NW-DIY は通信時のパケット処理を分かりやすく学ぶためのツールですが、
# たとえば別のツールの機能を NW-DIY の網に取り込んだときには、運用や設
# 定の API を NW-DIY から操作することで、あたかも NW-DIY の機能の一部
# であるかのように扱うことができます。そのとき、大抵の外部ツールはイー
# サネットインターフェースを通してパケット送受信しますので、パイプ機能
# で作成した veth インターフェースを使うようにすれば、NW-DIY の一部と
# して機能させることができます。
#
# 通常のパイプでは、暗にパイプインスタンスが加わります。(要る？)
#
# +----------+    +------+     +----------+
# |          +--->------------>|          |
# | function |<-----------<----+ function |
# |          |    | pipe |     |          |
# +----------+    +------+     +----------+
#
# 左端や右端がインターフェースのとき、パイプインスタンスではなく
# 明示されたインターフェースインスタンスを使います。
#
# +----------+     +----------+     +----------+
# |          +---->|          +---->|          |
# | ethernet |<----+ function |<----+ ethernet |
# |          |     |          |     |          |
# |..........|     +----------+     |..........|
# |   eth0   |                      |   eth1   |
# +----------+                      +----------+
#
# function2 が OS のイーサネットインターフェースを使うもののとき、
# その隣がインターフェースであれば、そのまま繋ぎます。
#
# +----------+    +-----------+    +----------+
# |          |    |           |    |          |
# | ethernet |    | function2 |    | ethernet |
# |          |    |           |    |          |
# |..........|    |...........|    |..........|
# |          |    |           |    |          |
# |   eth0   +----+           +----+   eth1   |
# +----------+    +-----------+    +----------+
#
# function2 が OS のイーサネットインターフェースを使うもののとき、
# その隣が通常の機能インスタンスであれば、
#
# +-----------+     +-----+    +-----------+    +-----+     +-------+
# |           +---->|--+  |    |           |    |  +------->|       |
# | function1 |<------+|  |    | function2 |    |  |+--<----+ func3 |
# |           |     | ||  |    |           |    |  || |     |       |
# +-----------+     +-||--+    |           |    +--||-+     +-------+
#                     ||       |...........|       ||
#                     ||       |           |       ||
#                    veth------+           +------veth
#                              +-----------+




















# パイプラインの機能は以下の機能要素の集合として動作します。
# 各機能は、パイプライン上のインスタンスごとに動作します。
#
# - パケット受信キュー
#    パケットと方向 (右行きか左行きか) を格納します。
#
# - 隣のインスタンス一覧 (左および右)
#    左側のインスタンスの一覧と、右側のインスタンスの一覧です。
#
# - インスタンス毎に定義されるパケット処理メソッド
#    各インスタンスのうえで、各パケットに対して
#    各クラスで定義されたインスタンスメソッド "forward" を実行します。
#    インスタンスメソッド "forward" は返り値として
#    パケットを渡すべき隣のインスタンス (のリスト) を返します。
#
# - パケット処理スレッド
#    パケット受信キューからパケットをひとつづつ取り出して、
#    インスタンスメソッド "forward" に渡し、
#    返り値として得た転送先インスタンスにパケットを渡します。
#
#  左インスタンス --------> + <-------- 右インスタンス
#                           |
#                           v
#                    パケット処理キュー
#                           |
#           +--スレッド-----|--------------+
#           |               v              |
#           |         クラスで定義された   |
#           |         forward メソッド     |
#           |               |              |
#           +---------------|--------------+
#                           v
#  左インスタンス <-------- + --------> 右インスタンス
#
#
################################################################
# パイプの機能構成その 2
################
# しっかりとした性能を出すためには、パケット処理機能を ruby ではなくカー
# ネルモジュールや P4 言語で実装する必要がある。その場合は ip link コマ
# ンドで設定できる veth 機能を使ってパケット処理機能を繋ぐ。
#
# 左インス 　　     　 　　 カーネル　 　　     　 　　 右インス
# 　タンス ←→ veth左 ←→ モジュール ←→ veth右 ←→ タンス
#
################################################################
# 使用例
################
# ブリッジの場合
#
# > eth0 | bridge | eth1
# > eth2 | bridge | eth3
#
# bridge インスタンスの左側インスタンスとして eth0, eth2 を一覧に登録し、
# 右側インスタンスとして eth1, eth3 を一覧に登録します。
#
# ここでは全ての ethX インスタンスがパケットを受信して bridge インスタ
# ンスに渡してくれます。
#
# bridge インスタンスの転送スレッドは、bridge インスタンスメソッド
# forward が返り値として教えてくれた転送先インスタンスにパケットを転送
# します。転送先インスタンスは、BUM であれば転送元インスタンスを除いた
# 全ての隣接になりますし、学習が効いていればひとつだけになります。ヘア
# ピンは普通やらないので空リストあるいは nil になります。
################
# NAT の場合
#
# > eth0 | nat | eth1
#
# nat インスタンスの左側インスタンスとして eth0 を一覧に登録し、
# 右側インスタンスとして eth1 を一覧に登録します。
# 
# eth0, eth1 インスタンスは、パケットを受信したら nat インスタンスに渡
# してくれます。
# 
# nat インスタンスの転送スレッドは、nat インスタンスメソッド forward が
# 返り値として教えてくれた転送先インターフェースにパケットを転送します。
# forward メソッドは、eth0 から来たパケットを処理した場合は eth1 を返し、
# eth1 から来たパケットを処理した場合は eth0 を返します。
#
################
# ブリッジはブリッジでも、性能確保のためにインスタンス内部で brctl コマ
# ンドでブリッジを作って使う場合
# 
# > eth0 | bridge | eth1
# > eth2 | bridge | eth3
#
# コマンド UI 的には上記と同じですが、内部の動作は異なります。
#
# bridge インスタンスは、スレッド起動に相当する処理で br0 を作り、ethX
# をその配下に登録します。あとは kernel の br0 にお任せとなります。
#
################
# 上記の nat インスタンスと btctl を使ったブリッジを併用する場合
#
# > eth0 | nat | bridge | eth1
#
# このようなコマンド UI にすると、eth0 と nat のあいだは上記とおなじ結
# 合になります。すなわち eth0 に来たパケットは nat に渡されますし、右か
# ら来て nat で処理されたパケットは eth0 インスタンスに渡されます。
#
# nat と bridge のあいだにインターフェースは存在しないので、パイプ機能
# 側で ip link コマンドによりインターフェース veth0, veth1 を作成します。
# veth0 は nat インスタンスの右側インスタンスとして登録し、veth1 は
# bridge インスタンスが作った br0 の配下に登録します。
#
# eth0 で受信して nat で処理したパケットは veth0 インスタンスからインター
# フェース veth0 に送信され、veth1 に上がってきます。br0 がこれを受けて
# eth1 に転送します。
#
# eth1 に来たパケットは br0 により veth1 に送信され、それが veth0 に上
# がってきます。veth0 インスタンスはこのパケットを吸い上げて nat インス
# タンスに渡し、nat インスタンスは eth0 インスタンスに渡し、eth0 インス
# タンスは eth0 から送信します。
#
################
# スレッドの停止
# 
# パイプ上のどれかのインスタンスに対して stop メソッドを発行します。
# すると、そのインスタンスだけからパケットを待ち受けていた隣接インス
# タンスにも連鎖的に stop メソッドが伝わります。
#
