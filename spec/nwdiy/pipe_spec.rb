#!/usr/bin/env ruby
# -*- mode: ruby; coding: utf-8 -*-
################################################################
# Copyright (c) 2017 KASHIMA Hiroaki <kashima@jp.fujitsu.com>
# 本ツールは Apache License 2.0 ライセンスで公開します。
# 著作権については ./LICENSE もご確認ください
################################################################

require "spec_helper"

require "pp"
require "socket"
require "rbconfig"

################################################################
# パイプの概要
################
# パイプの機能は、Nwdiy::Func::XXX 機能インスタンスを横に並べて
# パケットを順次処理させるための機構です。
# シェルのパイプ機能でコマンドの標準入出力を繋げる仕組みと似ています。
# ただし、シェルのパイプ機能は左から右への一方向ですが、
# NwDiy のパイプ機能は双方向です。双方向のパイプを可能にすることで、
# 往路パケットに加えた変更を復路パケットで戻せるようにしています。
#
# よく考えると '.' によるメソッドチェーンにも似ています。
# 似てはいますが別物であることにご注意ください。
# まず、ruby のメソッドチェーンは双方向というわけにはいきません。
# それに、パイプはインスタンス間を通過するパケットに対する処理ですが、
# メソッドはインスタンスなどに対する処理です。
# 似ているが別物、ということでご理解ください。
################################################################
# パイプの機能構成
################
#
# ごく簡単なパイプは、以下のように表現できます。この例では、
# Nwdiy::Func::XXX 機能インスタンス func で eth0 と eth1 を結んでいま
# す。eth0 に流れてきたパケットは func で処理されて eth1 に流されます
# し、eth1 から逆流してくるパケットは func で処理されて eth0 に流され
# ます。
#
# irb> eth0 | func | eth1
#
# +----------+     +----------+     +----------+
# |          |     |          |     |          |
# | ethernet |     | function |     | ethernet |
# |          +---->---------------->|          |
# |          |<---------------<-----+          |
# |          |     |          |     |          |
# |..........|     +----------+     |..........|
# |   eth0   |                      |   eth1   |
# +----------+                      +----------+
#
# 複数の機能インスタンスを並べることもできます。この例では、funcA と
# funcB で eth0 と eth1 を結んでいます。ここではパイプの内部構造がちょっ
# と見えてきました。funcA と funcB のあいだに、OS にないイーサネットイ
# ンターフェースが発生しています。つまり各 func はイーサネットインター
# フェース間を中継しているつもりなのです。
#
# irb> eth0 | funcA | funcB | eth1
#
# +------+    +-------+    +-----+
# |      |    |       |    | +-----+    +-------+    +------+
# | eth  |    | funcA |    | | eth |    |       |    |      |
# |      +--->------------>| |     |    | funcB |    | eth  |
# |      |<-----------<----+ |     +--->------------>|      |
# |      |    |       |    +-|     |<------------<---+      |
# |......|    +-------+      +-----+    +-------+    |......|
# | eth0 |                                           | eth1 |
# +------+                                           +------+
#
#
# NW-DIY では Nwdiy::Func::XXX クラスでパケット処理を書いて、中継させ
# ていろいろ試してみるというのが基本です。しかし既存の Linux の機能や
# 既成品の機能も使いたいこと、ありますよね。そういうとき、
# Nwdiy::Func::XXX ではそういった既存機能の設定を行ないます。実際のパ
# ケットはアプリ層を通さず、カーネル内部で処理されてしまいます。
#
# irb> eth0 | func | eth1
#
# +----------+     +----------+     +----------+
# | ethernet |     | function |     | ethernet |
# |..........|     |..........|     |..........|
# |   eth0   +---->|          +---->|   eth1   |
# |          |<----+          |<----+          |
# +----------+     +----------+     +----------+
#
# 既成品をパイプで繋ぐこともできます。このとき下図にあるように、カーネ
# ル内に新しいイーサネットインターフェースを生成して繋いでいます。この
# 新しいイーサネットインターフェースは Linux の ip link コマンドで生成
# できるインターフェースの一種 veth で、p0 に送信したパケットは p1 で
# 受信できますし、逆に p1 に送信したパケットは p0 で受信できます。
#
### なお、この機能を使うには、veth を生成/削除する権限 (通常は root)
### が必要です。
#
# irb> eth0 | funcA | funcB | eth1
#
# +------+   +-------+   +---------+   +-------+   +------+
# | eth  |   | funcA |   |  veth   |   | funcB |   | eth  |
# |......|   |.......|   |....|....|   |.......|   |......|
# | eth0 +-->| funcA +-->| p0 | p1 +-->| funcB +-->| eth1 |
# |      |<--+       |<--+    |    |<--+       |<--+      |
# +------+   +-------+   +----+----+   +-------+   +------+
#
################################################################


# パイプそのものより先に、パイプの元になる左右のインターフェースの区別
# について、func_spec.rb と func.rb で定義と実装と試験をする。

# パイプそのものより先に、パケットに右行きか左行きかの識別子を設けて、
# packet_spec.rb と packet.rb で定義と実装と試験をする。
