#!/usr/bin/env ruby
# -*- mode: ruby; coding: utf-8 -*-
################################################################
# 分岐系ネットワーク機能の抽象クラスです。
# パケットを開き、データ種別ごとに分別して上流に流します。
# また、上流から送出されるパケットを適切に梱包します。
#
# たとえばイーサネットフレームから IPv4 パケットや IPv6 パケットを
# 取り出したり、IPv4 パケットや IPv6 パケットをイーサネットフレームに
# 包んで送出します。
#
#【試行錯誤】
#
# まずは UI から考えてみる。
# ホントに spl という絵のとおりの概念でいいのかな。
#
# eth0 | flt | spl
# eth0 で受信したパケットを flt に通して spl で受信する。
# 逆に、spl から出てきたパケットを flt に通して eth0 から出す。
#
# eth0 | flt1 | spl
# spl.vlan(40) | flt2 | eth1
# eth0 で受信したパケットを flt に通して spl で受信する。
# そして spl で vlan-id 40 であれば vlan ヘッダを剥がして
# flt2 に通し eth2 から出す。
# 逆に、eth1 で受信したパケットは flt2 に通して spl で受け、
# vlan-id 40 を履かせて flt1 を通して eth0 から出す。
#
# eth0.vlan(10).type(0x0800).proto(89) | app
# eth0 の vlan10 上の OSPFv2 パケットを app に渡す。
# 逆に app から送出されたパケットに IP, VLAN, Ether を履かせて eth0 から出す。
# IP, Ether の送信元アドレスはどこで設定すればいいんだ？
# (これは spl の文法ではなくパケットフィルタの文法にすべきなのかも)
#
# 送信元アドレス設定の案
# eth0.local = "00:00:0e:00:00:01"
# eth0.ipv4.local = "192.0.2.1/24"
# eth0.ipv6[1].local = "2001:db8:1::6/64"
# eth0.ipv6[2].local = "2001:db8:2::6/64"
# eth0.vlan(40).ipv4.local = "198.51.100.4/24"
#
# これ、spl を独立機能として作るっていうことではなく
# Nwdiy::Func みんなの共通機能にすべきなのかもしれない。
#
################################################################
